/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : RecognizerCodegen.sm
 */

package man.dan.smc;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodHandles.Lookup;
import java.lang.invoke.MethodType;
import statemap.FSMContext7;
import statemap.State7;
import statemap.TransitionHandle;

public class RecognizerCodegenContext
    extends FSMContext7
{
//---------------------------------------------------------------
// Member methods.
//

    //-----------------------------------------------------------
    // Constructors.
    //

    public RecognizerCodegenContext(final RecognizerCodegen owner)
    {
        this (owner, _States[MAP_NAME_StartState_STATE_ID]);
    }

    public RecognizerCodegenContext(final RecognizerCodegen owner, final int initStateId)
    {
        this (owner, _States[initStateId]);    }

    public RecognizerCodegenContext(final RecognizerCodegen owner, final State7 initState)
    {
        super (initState);

        ctxt = owner;
    }

    //
    // end of Constructors.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // FSMContext7 Abstract Method Override.
    //

    @Override
    protected void executeAction(final MethodHandle mh)
    {
        try
        {
            mh.invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }

        return;
    }

    //
    // end of FSMContext7 Abstract Method Override.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // Transitions.
    //

    public void EOS()
    {
        _transition = "EOS";
        try
        {
            final TransitionHandle th =
                getState().transition(EOS29_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void bigLetter()
    {
        _transition = "bigLetter";
        try
        {
            final TransitionHandle th =
                getState().transition(bigLetter25_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void colon()
    {
        _transition = "colon";
        try
        {
            final TransitionHandle th =
                getState().transition(colon4_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void comma()
    {
        _transition = "comma";
        try
        {
            final TransitionHandle th =
                getState().transition(comma26_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void digit()
    {
        _transition = "digit";
        try
        {
            final TransitionHandle th =
                getState().transition(digit24_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void digit(int dig)
    {
        _transition = "digit";
        try
        {
            final TransitionHandle th =
                getState().transition(digit6_TRANSITION_ID);

            if (th.isDefault() == true)
            {
                (th.handle()).invokeExact(this);
            }
            else
            {
                (th.handle()).invokeExact(this, dig);
            }
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void equal()
    {
        _transition = "equal";
        try
        {
            final TransitionHandle th =
                getState().transition(equal21_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void error()
    {
        _transition = "error";
        try
        {
            final TransitionHandle th =
                getState().transition(error31_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void percentOrExclamationoOrDot()
    {
        _transition = "percentOrExclamationoOrDot";
        try
        {
            final TransitionHandle th =
                getState().transition(percentOrExclamationoOrDot27_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void question()
    {
        _transition = "question";
        try
        {
            final TransitionHandle th =
                getState().transition(question28_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void semicolon()
    {
        _transition = "semicolon";
        try
        {
            final TransitionHandle th =
                getState().transition(semicolon8_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void smallLetter()
    {
        _transition = "smallLetter";
        try
        {
            final TransitionHandle th =
                getState().transition(smallLetter23_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void smallLetter(char letter)
    {
        _transition = "smallLetter";
        try
        {
            final TransitionHandle th =
                getState().transition(smallLetter19_TRANSITION_ID);

            if (th.isDefault() == true)
            {
                (th.handle()).invokeExact(this);
            }
            else
            {
                (th.handle()).invokeExact(this, letter);
            }
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    //
    // end of Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.StartState State Transitions.
    //

    private void MAP_NAME_StartState_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_StartState_smallLetter(char letter)
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
            clearState();
            ctxt.addToHead(letter);
        }
        finally
        {
            setState(_States[MAP_NAME_GetHead_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of MAP_NAME.StartState State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.GetHead State Transitions.
    //

    private void MAP_NAME_GetHead_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_GetHead_colon()
    {
        final int stateId = _state.getId();

        if (correctHeader())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newNum();
            }
            finally
            {
                setState(_States[MAP_NAME_InputNum_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_GetHead_Default();
        }


        return;
    }


    private void MAP_NAME_GetHead_smallLetter(char letter)
    {
        final int stateId = _state.getId();

        if (isPlaceInHeader())
        {
            exitState();

            try
            {
                clearState();
                ctxt.addToHead(letter);
            }
            finally
            {
                setState(_States[MAP_NAME_GetHead_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_GetHead_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.GetHead State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.InputNum State Transitions.
    //

    private void MAP_NAME_InputNum_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_InputNum_comma()
    {
        final int stateId = _state.getId();

        if (endOfNum())
        {
            exitState();

            try
            {
                clearState();
                ctxt.saveNum();
                ctxt.newNum();
            }
            finally
            {
                setState(_States[MAP_NAME_InputNum_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_InputNum_Default();
        }


        return;
    }


    private void MAP_NAME_InputNum_digit(int dig)
    {
        final int stateId = _state.getId();

        if (AddNumCorrectness())
        {
            exitState();

            try
            {
                clearState();
                ctxt.addDigitToNum(dig);
            }
            finally
            {
                setState(_States[MAP_NAME_InputNum_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_InputNum_Default();
        }


        return;
    }


    private void MAP_NAME_InputNum_semicolon()
    {
        final int stateId = _state.getId();

        if (endOfNum())
        {
            exitState();

            try
            {
                clearState();
                ctxt.saveNum();
            }
            finally
            {
                setState(_States[MAP_NAME_bodyAvailable_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_InputNum_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.InputNum State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.bodyAvailable State Transitions.
    //

    private void MAP_NAME_bodyAvailable_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_bodyAvailable_EOS()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
            clearState();
            ctxt.rowCorrect();
        }
        finally
        {
            setState(_States[MAP_NAME_Correct_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_bodyAvailable_question()
    {
        final int stateId = _state.getId();

        if (isBodyEn())
        {
            exitState();

            try
            {
                // No actions.
            }
            finally
            {
                setState(_States[MAP_NAME_BodyQ_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_bodyAvailable_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.bodyAvailable State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.BodyQ State Transitions.
    //

    private void MAP_NAME_BodyQ_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_BodyQ_smallLetter(char letter)
    {
        final int stateId = _state.getId();

        if (letter == 'b')
        {
            exitState();

            try
            {
                // No actions.
            }
            finally
            {
                setState(_States[MAP_NAME_BodyB_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_BodyQ_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.BodyQ State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.BodyB State Transitions.
    //

    private void MAP_NAME_BodyB_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_BodyB_smallLetter(char letter)
    {
        final int stateId = _state.getId();

        if (letter == 'o')
        {
            exitState();

            try
            {
                // No actions.
            }
            finally
            {
                setState(_States[MAP_NAME_BodyO_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_BodyB_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.BodyB State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.BodyO State Transitions.
    //

    private void MAP_NAME_BodyO_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_BodyO_smallLetter(char letter)
    {
        final int stateId = _state.getId();

        if (letter == 'd')
        {
            exitState();

            try
            {
                // No actions.
            }
            finally
            {
                setState(_States[MAP_NAME_BodyD_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_BodyO_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.BodyO State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.BodyD State Transitions.
    //

    private void MAP_NAME_BodyD_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_BodyD_smallLetter(char letter)
    {
        final int stateId = _state.getId();

        if (letter == 'y')
        {
            exitState();

            try
            {
                // No actions.
            }
            finally
            {
                setState(_States[MAP_NAME_BodyY_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_BodyD_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.BodyD State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.BodyY State Transitions.
    //

    private void MAP_NAME_BodyY_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_BodyY_equal()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_inBody_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of MAP_NAME.BodyY State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.inBody State Transitions.
    //

    private void MAP_NAME_inBody_Default()
    {
        final int stateId = _state.getId();

        exitState();

        try
        {
        }
        finally
        {
            setState(_States[MAP_NAME_Error_STATE_ID]);
        }

        enterState();

        return;
    }


    private void MAP_NAME_inBody_EOS()
    {
        final int stateId = _state.getId();

        if (notEmptyBody())
        {
            exitState();

            try
            {
                clearState();
                ctxt.rowCorrect();
            }
            finally
            {
                setState(_States[MAP_NAME_Correct_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    private void MAP_NAME_inBody_bigLetter()
    {
        final int stateId = _state.getId();

        if (bodyInputEnable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newBodySymbol();
            }
            finally
            {
                setState(_States[MAP_NAME_inBody_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    private void MAP_NAME_inBody_comma()
    {
        final int stateId = _state.getId();

        if (bodyInputEnable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newBodySymbol();
            }
            finally
            {
                setState(_States[MAP_NAME_inBody_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    private void MAP_NAME_inBody_digit()
    {
        final int stateId = _state.getId();

        if (bodyInputEnable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newBodySymbol();
            }
            finally
            {
                setState(_States[MAP_NAME_inBody_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    private void MAP_NAME_inBody_percentOrExclamationoOrDot()
    {
        final int stateId = _state.getId();

        if (bodyInputEnable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newBodySymbol();
            }
            finally
            {
                setState(_States[MAP_NAME_inBody_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    private void MAP_NAME_inBody_question()
    {
        final int stateId = _state.getId();

        if (bodyInputEnable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newBodySymbol();
            }
            finally
            {
                setState(_States[MAP_NAME_inBody_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    private void MAP_NAME_inBody_smallLetter()
    {
        final int stateId = _state.getId();

        if (bodyInputEnable())
        {
            exitState();

            try
            {
                clearState();
                ctxt.newBodySymbol();
            }
            finally
            {
                setState(_States[MAP_NAME_inBody_STATE_ID]);
            }

            enterState();
        }
        else
        {
            MAP_NAME_inBody_Default();
        }


        return;
    }


    //
    // end of MAP_NAME.inBody State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // MAP_NAME.Error State Transitions.
    //

    private void MAP_NAME_Error_error()
    {
        final int stateId = _state.getId();

        try
        {
        }
        finally
        {
        }


        return;
    }


    //
    // end of MAP_NAME.Error State Transitions.
    //-----------------------------------------------------------

//---------------------------------------------------------------
// Member data.
//

    transient private RecognizerCodegen ctxt;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

    public static final int MAP_NAME_StartState_STATE_ID = 0;
    public static final int MAP_NAME_GetHead_STATE_ID = 1;
    public static final int MAP_NAME_InputNum_STATE_ID = 2;
    public static final int MAP_NAME_bodyAvailable_STATE_ID = 3;
    public static final int MAP_NAME_BodyQ_STATE_ID = 4;
    public static final int MAP_NAME_BodyB_STATE_ID = 5;
    public static final int MAP_NAME_BodyO_STATE_ID = 6;
    public static final int MAP_NAME_BodyD_STATE_ID = 7;
    public static final int MAP_NAME_BodyY_STATE_ID = 8;
    public static final int MAP_NAME_inBody_STATE_ID = 9;
    public static final int MAP_NAME_Correct_STATE_ID = 10;
    public static final int MAP_NAME_Error_STATE_ID = 11;
    public static final int MAP_NAME_NextState_STATE_ID = 12;

    private static final int STATE_COUNT = 13;

    private static final int EOS29_TRANSITION_ID = 1;
    private static final int bigLetter25_TRANSITION_ID = 2;
    private static final int colon4_TRANSITION_ID = 3;
    private static final int comma26_TRANSITION_ID = 4;
    private static final int digit24_TRANSITION_ID = 5;
    private static final int digit6_TRANSITION_ID = 6;
    private static final int equal21_TRANSITION_ID = 7;
    private static final int error31_TRANSITION_ID = 8;
    private static final int percentOrExclamationoOrDot27_TRANSITION_ID = 9;
    private static final int question28_TRANSITION_ID = 10;
    private static final int semicolon8_TRANSITION_ID = 11;
    private static final int smallLetter23_TRANSITION_ID = 12;
    private static final int smallLetter19_TRANSITION_ID = 13;

    private static final int TRANSITION_COUNT = 14;

    private static final MethodType[] TRANSITION_TYPES =
    {
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        MethodType.methodType(void.class, int.class),
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        MethodType.methodType(void.class, char.class)
    };

    private static final String[] MAP_NAMES =
    {
        "MAP_NAME"
    };

    private static final String[][] STATE_NAMES =
    {
        new String[]
        {
            "StartState",
            "GetHead",
            "InputNum",
            "bodyAvailable",
            "BodyQ",
            "BodyB",
            "BodyO",
            "BodyD",
            "BodyY",
            "inBody",
            "Correct",
            "Error",
            "NextState"
        }
    };

    private static String[][] STATE_TRANSITIONS =
    {
        new String[]
        {
            "Default",
            "smallLetter"
        },

        new String[]
        {
            "Default",
            "colon",
            "smallLetter"
        },

        new String[]
        {
            "Default",
            "comma",
            "digit",
            "semicolon"
        },

        new String[]
        {
            "Default",
            "EOS",
            "question"
        },

        new String[]
        {
            "Default",
            "smallLetter"
        },

        new String[]
        {
            "Default",
            "smallLetter"
        },

        new String[]
        {
            "Default",
            "smallLetter"
        },

        new String[]
        {
            "Default",
            "smallLetter"
        },

        new String[]
        {
            "Default",
            "equal"
        },

        new String[]
        {
            "Default",
            "EOS",
            "bigLetter",
            "comma",
            "digit",
            "percentOrExclamationoOrDot",
            "question",
            "smallLetter"
        },

        new String[]
        {
        },

        new String[]
        {
            "error"
        },

        new String[]
        {
        }
    };

    private static final String[] TRANSITION_NAMES =
    {
        "Default",
        "EOS",
        "bigLetter",
        "colon",
        "comma",
        "digit",
        "digit",
        "equal",
        "error",
        "percentOrExclamationoOrDot",
        "question",
        "semicolon",
        "smallLetter",
        "smallLetter"
    };

    private static final State7[] _States = new State7[STATE_COUNT];

    static
    {
        final Lookup lookup = MethodHandles.lookup();
        final Class<?> clazz = RecognizerCodegenContext.class;
        final int mapSize = MAP_NAMES.length;
        int stateSize;
        int mapIndex;
        int stateIndex;
        int transIndex;
        int stateId = 0;
        String mapName;
        String stateName;
        String transName;
        String methodName;
        MethodType transType;
        MethodHandle entryHandle;
        MethodHandle exitHandle;
        TransitionHandle[] transitions;

        for (mapIndex = 0; mapIndex < mapSize; ++mapIndex)
        {
            mapName = MAP_NAMES[mapIndex];
            stateSize = STATE_NAMES[mapIndex].length;

            for (stateIndex = 0; stateIndex < stateSize; ++stateIndex, ++stateId)
            {
                stateName = STATE_NAMES[mapIndex][stateIndex];
                transitions = new TransitionHandle[TRANSITION_COUNT];

                methodName = String.format(ENTRY_NAME, mapName, stateName);
                entryHandle = lookupMethod(lookup, clazz, methodName, NO_ARGS_TYPE);
                methodName = String.format(EXIT_NAME, mapName, stateName);
                exitHandle = lookupMethod(lookup, clazz, methodName, NO_ARGS_TYPE);

                for (transIndex = 1; transIndex < TRANSITION_COUNT; ++transIndex)
                {
                    transName = TRANSITION_NAMES[transIndex];
                    transType = TRANSITION_TYPES[transIndex];
                    transitions[transIndex] =
                        lookupTransition(lookup, clazz, mapName, stateName, transName, transType);
                }

                _States[stateId] =
                    new State7(
                        String.format(STATE_NAME_FORMAT, mapName, stateName),
                        stateId,
                        entryHandle,
                        exitHandle,
                        transitions,
                        STATE_TRANSITIONS[stateId]);

            }
        }
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
