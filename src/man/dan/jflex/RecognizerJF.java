/* The following code was generated by JFlex 1.7.0 */

package man.dan.jflex;

import java.util.ArrayList;
import java.util.HashMap;
import java.io.*;
import java.nio.charset.StandardCharsets;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>recognizer-jump.jflex</tt>
 */
class RecognizerJF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NUMS_FT = 2;
  public static final int NUMS_S = 4;
  public static final int BODY = 6;
  public static final int DELIMETER_FT = 8;
  public static final int DELIMETER_S = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\1\2\1\2\1\2\23\0\1\25\3\0\1\25\6\0"+
    "\1\15\1\0\1\25\1\0\12\14\1\11\1\16\1\0\1\24\1\0"+
    "\1\17\1\0\32\25\6\0\1\7\1\20\1\25\1\22\1\4\1\6"+
    "\5\25\1\5\1\13\1\25\1\21\3\25\1\12\1\3\3\25\1\10"+
    "\1\23\1\25\12\0\1\2\u1fa2\0\1\2\1\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\3\1\1\3\1\4\2\3\1\5"+
    "\1\3\1\6\1\3\1\7\1\10\13\0\1\11\1\12"+
    "\25\0\1\13\1\14\74\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\232\0\260\0\306\0\334\0\232\0\232\0\362\0\u0108"+
    "\0\232\0\u011e\0\232\0\u0134\0\232\0\232\0\u014a\0\u0160"+
    "\0\u0176\0\u018c\0\u01a2\0\u01b8\0\u01ce\0\u01e4\0\u01fa\0\u0210"+
    "\0\u0226\0\232\0\232\0\u023c\0\u0252\0\u0268\0\u027e\0\u0294"+
    "\0\u02aa\0\u02c0\0\u02d6\0\u02ec\0\u0302\0\u0318\0\u032e\0\u0344"+
    "\0\u035a\0\u0370\0\u0386\0\u039c\0\u03b2\0\u03c8\0\u03de\0\u03f4"+
    "\0\232\0\232\0\u040a\0\u0420\0\u0436\0\u044c\0\u0462\0\u0478"+
    "\0\u048e\0\u04a4\0\u04ba\0\u04d0\0\u04e6\0\u04fc\0\u0512\0\u0528"+
    "\0\u053e\0\u0554\0\u056a\0\u0580\0\u0596\0\u05ac\0\u05c2\0\u05d8"+
    "\0\u05ee\0\u0604\0\u061a\0\u0630\0\u0646\0\u065c\0\u0672\0\u0688"+
    "\0\u069e\0\u06b4\0\u06ca\0\u06e0\0\u06f6\0\u070c\0\u0722\0\u0738"+
    "\0\u074e\0\u0764\0\u077a\0\u0790\0\u07a6\0\u07bc\0\u07d2\0\u07e8"+
    "\0\u07fe\0\u0814\0\u082a\0\u0840\0\u0856\0\u086c\0\u0882\0\u0898"+
    "\0\u08ae\0\u08c4\0\u08da\0\u08f0\0\u0906\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\0\24\10\1\11\1\0\1\12\2\10"+
    "\1\13\3\10\1\14\13\10\1\15\1\16\1\0\11\15"+
    "\1\17\12\15\1\16\1\0\11\15\1\20\12\15\1\21"+
    "\1\0\14\15\1\22\7\15\1\16\1\0\12\15\1\23"+
    "\1\24\10\15\1\16\1\0\12\15\1\25\1\26\7\15"+
    "\32\0\1\27\30\0\1\30\31\0\1\31\26\0\1\32"+
    "\25\0\1\33\31\0\1\34\6\0\1\21\31\0\1\35"+
    "\30\0\1\35\27\0\1\36\27\0\1\37\25\0\1\40"+
    "\32\0\1\41\15\0\1\42\25\0\1\43\30\0\1\44"+
    "\25\0\1\45\33\0\1\46\17\0\1\47\25\0\1\50"+
    "\34\0\1\51\16\0\1\52\25\0\1\53\35\0\1\54"+
    "\15\0\1\55\25\0\1\56\14\0\6\57\1\0\4\57"+
    "\1\0\5\57\1\0\1\57\14\0\1\60\25\0\1\61"+
    "\12\0\1\21\1\0\6\62\1\0\4\62\1\0\5\62"+
    "\1\0\1\62\14\0\1\63\25\0\1\64\12\0\1\21"+
    "\1\0\6\65\1\0\4\65\1\0\5\65\1\0\1\65"+
    "\14\0\1\66\25\0\1\67\12\0\1\21\1\0\6\70"+
    "\1\0\4\70\1\0\5\70\1\0\1\70\14\0\1\71"+
    "\25\0\1\72\12\0\1\21\1\0\6\73\1\0\4\73"+
    "\1\0\5\73\1\0\1\73\1\0\1\21\1\0\6\74"+
    "\1\0\4\74\1\0\5\74\1\0\1\74\1\0\1\21"+
    "\1\0\6\75\1\0\4\75\1\0\5\75\1\0\1\75"+
    "\1\0\1\21\1\0\6\76\1\0\4\76\1\0\5\76"+
    "\1\0\1\76\1\0\1\21\1\0\6\77\1\0\4\77"+
    "\1\0\5\77\1\0\1\77\1\0\1\21\1\0\6\100"+
    "\1\0\4\100\1\0\5\100\1\0\1\100\1\0\1\21"+
    "\1\0\6\101\1\0\4\101\1\0\5\101\1\0\1\101"+
    "\1\0\1\21\1\0\6\102\1\0\4\102\1\0\5\102"+
    "\1\0\1\102\1\0\1\21\1\0\6\103\1\0\4\103"+
    "\1\0\5\103\1\0\1\103\1\0\1\21\1\0\6\104"+
    "\1\0\4\104\1\0\5\104\1\0\1\104\1\0\1\21"+
    "\1\0\6\105\1\0\4\105\1\0\5\105\1\0\1\105"+
    "\1\0\1\21\1\0\6\106\1\0\4\106\1\0\5\106"+
    "\1\0\1\106\1\0\1\21\1\0\6\107\1\0\4\107"+
    "\1\0\5\107\1\0\1\107\1\0\1\21\1\0\6\110"+
    "\1\0\4\110\1\0\5\110\1\0\1\110\1\0\1\21"+
    "\1\0\6\111\1\0\4\111\1\0\5\111\1\0\1\111"+
    "\1\0\1\21\1\0\6\112\1\0\4\112\1\0\5\112"+
    "\1\0\1\112\1\0\1\21\1\0\6\113\1\0\4\113"+
    "\1\0\5\113\1\0\1\113\1\0\1\21\1\0\6\114"+
    "\1\0\4\114\1\0\5\114\1\0\1\114\1\0\1\21"+
    "\1\0\6\115\1\0\4\115\1\0\5\115\1\0\1\115"+
    "\1\0\1\21\1\0\6\116\1\0\4\116\1\0\5\116"+
    "\1\0\1\116\1\0\1\21\1\0\6\117\1\0\4\117"+
    "\1\0\5\117\1\0\1\117\1\0\1\21\1\0\6\120"+
    "\1\0\4\120\1\0\5\120\1\0\1\120\1\0\1\21"+
    "\1\0\6\121\1\0\4\121\1\0\5\121\1\0\1\121"+
    "\1\0\1\21\1\0\6\122\1\0\4\122\1\0\5\122"+
    "\1\0\1\122\1\0\1\21\1\0\6\123\1\0\4\123"+
    "\1\0\5\123\1\0\1\123\1\0\1\21\1\0\6\124"+
    "\1\0\4\124\1\0\5\124\1\0\1\124\1\0\1\21"+
    "\1\0\6\125\1\0\4\125\1\0\5\125\1\0\1\125"+
    "\1\0\1\21\1\0\6\126\1\0\4\126\1\0\5\126"+
    "\1\0\1\126\1\0\1\21\1\0\6\127\1\0\4\127"+
    "\1\0\5\127\1\0\1\127\1\0\1\21\1\0\6\130"+
    "\1\0\4\130\1\0\5\130\1\0\1\130\1\0\1\21"+
    "\1\0\6\131\1\0\4\131\1\0\5\131\1\0\1\131"+
    "\1\0\1\21\1\0\6\132\1\0\4\132\1\0\5\132"+
    "\1\0\1\132\1\0\1\21\1\0\6\133\1\0\4\133"+
    "\1\0\5\133\1\0\1\133\1\0\1\21\1\0\6\134"+
    "\1\0\4\134\1\0\5\134\1\0\1\134\1\0\1\21"+
    "\1\0\6\135\1\0\4\135\1\0\5\135\1\0\1\135"+
    "\1\0\1\21\1\0\6\136\1\0\4\136\1\0\5\136"+
    "\1\0\1\136\1\0\1\21\1\0\6\137\1\0\4\137"+
    "\1\0\5\137\1\0\1\137\1\0\1\21\1\0\6\140"+
    "\1\0\4\140\1\0\5\140\1\0\1\140\1\0\1\21"+
    "\1\0\6\141\1\0\4\141\1\0\5\141\1\0\1\141"+
    "\1\0\1\21\1\0\6\142\1\0\4\142\1\0\5\142"+
    "\1\0\1\142\1\0\1\21\1\0\6\143\1\0\4\143"+
    "\1\0\5\143\1\0\1\143\1\0\1\21\1\0\6\144"+
    "\1\0\4\144\1\0\5\144\1\0\1\144\1\0\1\21"+
    "\1\0\6\145\1\0\4\145\1\0\5\145\1\0\1\145"+
    "\1\0\1\21\1\0\6\146\1\0\4\146\1\0\5\146"+
    "\1\0\1\146\1\0\1\21\1\0\6\147\1\0\4\147"+
    "\1\0\5\147\1\0\1\147\1\0\1\21\1\0\6\150"+
    "\1\0\4\150\1\0\5\150\1\0\1\150\1\0\1\21"+
    "\1\0\6\151\1\0\4\151\1\0\5\151\1\0\1\151"+
    "\1\0\1\21\1\0\6\152\1\0\4\152\1\0\5\152"+
    "\1\0\1\152\1\0\1\21\1\0\6\153\1\0\4\153"+
    "\1\0\5\153\1\0\1\153\1\0\1\21\1\0\6\154"+
    "\1\0\4\154\1\0\5\154\1\0\1\154\1\0\1\21"+
    "\1\0\6\155\1\0\4\155\1\0\5\155\1\0\1\155"+
    "\1\0\1\21\1\0\6\156\1\0\4\156\1\0\5\156"+
    "\1\0\1\156\1\0\1\21\1\0\6\157\1\0\4\157"+
    "\1\0\5\157\1\0\1\157\1\0\1\21\1\0\6\160"+
    "\1\0\4\160\1\0\5\160\1\0\1\160\1\0\1\21"+
    "\1\0\6\161\1\0\4\161\1\0\5\161\1\0\1\161"+
    "\1\0\1\21\1\0\6\162\1\0\4\162\1\0\5\162"+
    "\1\0\1\162\1\0\1\21\1\0\6\163\1\0\4\163"+
    "\1\0\5\163\1\0\1\163\1\0\1\21\1\0\6\164"+
    "\1\0\4\164\1\0\5\164\1\0\1\164\1\0\1\21"+
    "\1\0\6\165\1\0\4\165\1\0\5\165\1\0\1\165"+
    "\1\0\1\21\1\0\6\166\1\0\4\166\1\0\5\166"+
    "\1\0\1\166";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2332];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\3\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\11\13\0\2\11\25\0\2\11\74\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private static HashMap<String, Integer> statistics = new HashMap<String, Integer>();
    private static ArrayList<String> curNums = new ArrayList<String>();

    private static void collectNumFAE(String num) {
        if (statistics.containsKey(num))
            statistics.put(num, statistics.get(num) + 1);
        else
            statistics.put(num, 1);
    }

    private static void addNum(String num) {
        curNums.add(num);
    }

    private static void clearNums() { curNums.clear(); }

    private static void saveNums() {
        for (String n : curNums) {
            collectNumFAE(n);
        }
    }

    public static void main(String[] args) throws Exception {
        long m = System.currentTimeMillis();
        if (args.length != 1 && args.length != 2)
            throw new Exception("Invalid argument count");


        String encodingName = "UTF-8";
        try {
            java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
        } catch (Exception e) {
            System.out.println("Invalid encoding '" + encodingName + "'");
            return;
        }

        RecognizerJF scanner = null;
        try {
            java.io.FileInputStream stream = new java.io.FileInputStream(args[0]);
            java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
            scanner = new RecognizerJF(reader);
            int retStatus;
            do {
                retStatus = scanner.yylex();
                if (retStatus == 1)
                    saveNums();

                clearNums();
                //System.out.println(retStatus);
            } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : \""+args[0]+"\"");
        }
        catch (java.io.IOException e) {
            System.out.println("IO error scanning file \""+args[0]+"\"");
            System.out.println(e);
        }
        catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
        }


        if (args.length == 2) {
            try {
                PrintWriter writeStat = new PrintWriter(args[1], StandardCharsets.UTF_8);
                writeStat.println(statistics);
                writeStat.close();
                System.out.println("Statistics was saved");
            } catch (Exception e) {
                System.out.println("Error writing statistics to file. Writing to System.out");
                System.out.println(statistics);
            }
        }
        else {
            System.out.println(statistics);
        }

        System.out.println("Time of processing: " + ((double) (System.currentTimeMillis() - m))/1000 + " seconds");

    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RecognizerJF(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return 3;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 13: break;
          case 2: 
            { return 0;
            } 
            // fall through
          case 14: break;
          case 3: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 15: break;
          case 4: 
            { yybegin(YYINITIAL); return 0;
            } 
            // fall through
          case 16: break;
          case 5: 
            { yybegin(YYINITIAL); return 1;
            } 
            // fall through
          case 17: break;
          case 6: 
            { yybegin(NUMS_FT);
            } 
            // fall through
          case 18: break;
          case 7: 
            { yybegin(NUMS_S);
            } 
            // fall through
          case 19: break;
          case 8: 
            { yybegin(BODY);
            } 
            // fall through
          case 20: break;
          case 9: 
            { clearNums(); yybegin(NUMS_FT);
            } 
            // fall through
          case 21: break;
          case 10: 
            { clearNums(); yybegin(NUMS_S);
            } 
            // fall through
          case 22: break;
          case 11: 
            { addNum(yytext()); yybegin(DELIMETER_FT);
            } 
            // fall through
          case 23: break;
          case 12: 
            { addNum(yytext()); yybegin(DELIMETER_S);
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
